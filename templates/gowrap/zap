import (
  "io"
  "go.uber.org/zap"
)

{{ $decorator := (or .Vars.DecoratorName (printf "%sWithZap" .Interface.Name)) }}

// {{$decorator}} implements {{.Interface.Type}} that is instrumented with zap logger
type {{$decorator}} struct {
  _log *zap.Logger
  _base {{.Interface.Type}}
}

// New{{$decorator}} instruments an implementation of the {{.Interface.Type}} with simple logging
func New{{$decorator}}(base {{.Interface.Type}}, log *zap.Logger) {{$decorator}} {
  return {{$decorator}}{
    _base: base,
    _log: log,
  }
}

{{range $method := .Interface.Methods}}
  // {{$method.Name}} implements {{$.Interface.Type}}
  func (_d {{$decorator}}) {{$method.Declaration}} {
      {{- if $method.HasParams}}
        _d._log.Debug("{{$decorator}}: calling {{$method.Name}}", zap.Reflect("params", {{$method.ParamsMap}}))
      {{else}}
        _d._log.Debug("{{$decorator}}: calling {{$method.Name}}")
      {{end -}}
      defer func() {
        {{- if $method.HasResults}}
          {{- if $method.ReturnsError}}
            if err != nil {
              _d._log.Error("{{$decorator}}: method {{$method.Name}} returned an error", zap.Error(err))
            } else {
              _d._log.Debug("{{$decorator}}: method {{$method.Name}} finished", zap.Reflect("results", {{$method.ResultsMap}}))
            }
          {{else}}
            _d._log.Debug("{{$decorator}}: method {{$method.Name}} finished", zap.Reflect("results", {{$method.ResultsMap}}))
          {{end -}}
        {{else}}
          _d._log.Debug("{{$decorator}}: {{$method.Name}} finished")
        {{end -}}
      }()
      {{ $method.Pass "_d._base." }}
  }
{{end}}
