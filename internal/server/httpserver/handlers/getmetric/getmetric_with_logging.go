// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../../templates/gowrap/zap
// gowrap: http://github.com/hexdigest/gowrap

package getmetric

//go:generate gowrap gen -p github.com/h2p2f/practicum-metrics/internal/server/httpserver/handlers/getmetric -i Getter -t ../../../../../templates/gowrap/zap -o getmetric_with_logging.go -l ""

import (
	"go.uber.org/zap"
)

// GetterWithZap implements Getter that is instrumented with zap logger
type GetterWithZap struct {
	_log  *zap.Logger
	_base Getter
}

// NewGetterWithZap instruments an implementation of the Getter with simple logging
func NewGetterWithZap(base Getter, log *zap.Logger) GetterWithZap {
	return GetterWithZap{
		_base: base,
		_log:  log,
	}
}

// GetCounter implements Getter
func (_d GetterWithZap) GetCounter(name string) (value int64, err error) {
	_d._log.Debug("GetterWithZap: calling GetCounter", zap.Reflect("params", map[string]interface{}{
		"name": name}))
	defer func() {
		if err != nil {
			_d._log.Error("GetterWithZap: method GetCounter returned an error", zap.Error(err))
		} else {
			_d._log.Debug("GetterWithZap: method GetCounter finished", zap.Reflect("results", map[string]interface{}{
				"value": value,
				"err":   err}))
		}
	}()
	return _d._base.GetCounter(name)
}

// GetGauge implements Getter
func (_d GetterWithZap) GetGauge(name string) (value float64, err error) {
	_d._log.Debug("GetterWithZap: calling GetGauge", zap.Reflect("params", map[string]interface{}{
		"name": name}))
	defer func() {
		if err != nil {
			_d._log.Error("GetterWithZap: method GetGauge returned an error", zap.Error(err))
		} else {
			_d._log.Debug("GetterWithZap: method GetGauge finished", zap.Reflect("results", map[string]interface{}{
				"value": value,
				"err":   err}))
		}
	}()
	return _d._base.GetGauge(name)
}
