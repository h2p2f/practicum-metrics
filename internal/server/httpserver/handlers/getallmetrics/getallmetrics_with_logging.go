// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../../../gowrap/templates/zap
// gowrap: http://github.com/hexdigest/gowrap

package getallmetrics

//go:generate gowrap gen -p github.com/h2p2f/practicum-metrics/internal/server/httpserver/handlers/getallmetrics -i Getter -t ../../../../../templates/gowrap/zap -o getallmetrics_with_logging.go -l ""

import (
	"go.uber.org/zap"
)

// GetterWithZap implements Getter that is instrumented with zap logger
type GetterWithZap struct {
	_log  *zap.Logger
	_base Getter
}

// NewGetterWithZap instruments an implementation of the Getter with simple logging
func NewGetterWithZap(base Getter, log *zap.Logger) GetterWithZap {
	return GetterWithZap{
		_base: base,
		_log:  log,
	}
}

// GetCounters implements Getter
func (_d GetterWithZap) GetCounters() (m1 map[string]int64) {
	_d._log.Debug("GetterWithZap: calling GetCounters")
	defer func() {
		_d._log.Debug("GetterWithZap: method GetCounters finished", zap.Reflect("results", map[string]interface{}{
			"m1": m1}))
	}()
	return _d._base.GetCounters()
}

// GetGauges implements Getter
func (_d GetterWithZap) GetGauges() (m1 map[string]float64) {
	_d._log.Debug("GetterWithZap: calling GetGauges")
	defer func() {
		_d._log.Debug("GetterWithZap: method GetGauges finished", zap.Reflect("results", map[string]interface{}{
			"m1": m1}))
	}()
	return _d._base.GetGauges()
}
