// Code generated by gowrap. DO NOT EDIT.
// template: ../../../../../../gowrap/templates/zap
// gowrap: http://github.com/hexdigest/gowrap

package dbping

//go:generate gowrap gen -p github.com/h2p2f/practicum-metrics/internal/server/httpserver/handlers/dbping -i Pinger -t ../../../../../templates/gowrap/zap-o dbping_with_logging.go -l ""

import (
	"go.uber.org/zap"
)

// PingerWithZap implements Pinger that is instrumented with zap logger
type PingerWithZap struct {
	_log  *zap.Logger
	_base Pinger
}

// NewPingerWithZap instruments an implementation of the Pinger with simple logging
func NewPingerWithZap(base Pinger, log *zap.Logger) PingerWithZap {
	return PingerWithZap{
		_base: base,
		_log:  log,
	}
}

// Ping implements Pinger
func (_d PingerWithZap) Ping() (err error) {
	_d._log.Debug("PingerWithZap: calling Ping")
	defer func() {
		if err != nil {
			_d._log.Error("PingerWithZap: method Ping returned an error", zap.Error(err))
		} else {
			_d._log.Debug("PingerWithZap: method Ping finished", zap.Reflect("results", map[string]interface{}{
				"err": err}))
		}
	}()
	return _d._base.Ping()
}
